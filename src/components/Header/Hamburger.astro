---

---

<!-- Animated Navigation Overlay -->
<div class="overlay overlay-slide-left" id="overlay">
  <nav>
    <ul>
      <li class="slide-out-1" id="nav-1">
        <a href="/">Home</a>
      </li>
      <li class="slide-out-2" id="nav-2">
        <a href="/contact/">Start Connecting</a>
      </li>
    </ul>
  </nav>
</div>

<!-- Hamburger Menu Button -->
<div class="menu-bars" id="menu-bars" aria-label="menu">
  <div class="bar-1"></div>
  <div class="bar-2"></div>
  <div class="bar-3"></div>
</div>

<script>
  // Animation Functions
  const menuBars = document.getElementById("menu-bars");
  const overlay = document.getElementById("overlay");
  const nav1 = document.getElementById("nav-1");
  const nav2 = document.getElementById("nav-2");

  const navItems = [nav1, nav2];

  // Control navigation animation
  function navAnimation(direction1, direction2) {
    navItems.forEach((nav, i) => {
      if (nav) {
        nav.classList.replace(
          `slide-${direction1}-${i + 1}`,
          `slide-${direction2}-${i + 1}`,
        );
      }
    });
  }

  // Toggle Nav Function
  function toggleNav() {
    // Toggle menu bars open/closed
    // Necessary question mark! Means if menuBars is null or undefined, the expression short-circuits and returns undefined instead of throwing an error.
    menuBars?.classList.toggle("change");

    // Toggle menu active
    overlay?.classList.toggle("overlay-active");

    if (overlay?.classList.contains("overlay-active")) {
      // Animate In - Overlay
      overlay.classList.replace("overlay-slide-left", "overlay-slide-right");

      // Animate In - Nav Items
      navAnimation("out", "in");
    } else {
      // Animate Out - Nav Items
      navAnimation("in", "out");

      // Animate Out - Overlay
      overlay?.classList.replace("overlay-slide-right", "overlay-slide-left");
    }
  }

  // Event Listeners
  menuBars?.addEventListener("click", toggleNav);

  navItems.forEach((nav) => {
    nav?.addEventListener("click", toggleNav);
  });
</script>

<style>
  /* Only display on mobile and tablet */
  .menu-bars,
  .overlay {
    display: none;
  }

  @media (max-width: 768px) {
    .menu-bars,
    .overlay {
      display: block;
    }

    /* overlay

fixed as we don't want it to move
9 brings it to the front as default elements have z index of 1

Because our navigation is a child of the overlay, add classes here to impact the nav*/
    .overlay {
      position: fixed;
      z-index: 9;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background-color: rgba(0, 0, 0, 0.7);
      transform: translateX(-100vw);
    }
    /* brings nav into view */
    .overlay-slide-right {
      transition: all 0.4s ease-in-out;
      transform: translateX(0);
    }
    /* brings it out of view */
    .overlay-slide-left {
      transition: all 0.8s ease-in-out;
      transform: translateX(-100vw);
    }

    /* Navigation Menu */
    nav,
    nav ul {
      height: 100vh;
      margin: 0;
      padding: 0;
    }

    nav ul {
      display: flex;
      flex-direction: column;
      justify-content: stretch;
      /* list style none prevents bullet points we'd normally have when creating a ul */
      list-style: none;
    }

    nav ul li {
      /* 50% of the parent vh of 100 */
      height: 50%;
      /* so we don't stretch the page horizontally */
      overflow: hidden;
    }

    /* style the anchor elemnts so they're not blue links */
    nav li a {
      position: relative;
      top: 45%;
      color: #fff;
      letter-spacing: 4px;
      text-decoration: none;
      display: block;
      text-align: center;
    }

    nav li a:hover {
      /* make nav links 20% bigger on hover */
      transform: scale(1.2);
    }

    /* the 'before' pseudo class: add content before the anchor tags, so to the left side of them 
In this case it's a line*/
    nav li a::before {
      /* but we don't want any text */
      content: "";
      width: 25vw;
      height: 2px;
      background-color: #fff;
      position: absolute;
      /* kind of in the middle but a bit higher up as we're accounting for the line itself */
      top: 47.5%;
      /* want it to start on the left side */
      left: 0;
      /* will become visible on hover - see below */
      opacity: 0;
    }

    /* pseudo classes are stackable */
    nav li a:hover::before {
      /*make visible on hover*/
      opacity: 1;
    }

    li:nth-of-type(1) {
      background-color: #5f6977;
    }

    nav li:nth-of-type(2) {
      background-color: #b5a68c;
    }

    /*SLIDE IN animation with delay for each nav item */
    /* animation type, speed, style, delay, both = 'backwards and forwards'? */
    .slide-in-1 {
      animation: slide-in 0.4s linear 0.2s both;
    }

    .slide-in-2 {
      animation: slide-in 0.4s linear 0.6s both;
    }

    /* The browser knows what slide-in-1 and 2 are because of the function. Earlier iteration (before refactoring) had the below in the JS ::selection     
    // nav1.classList.remove('slide-in-1')
        // nav1.classList.add('slide-out-1')
        // nav2.classList.remove('slide-in-2')
        // nav2.classList.add('slide-out-2') 
        
        This has now been replaced with the navAnimation function which includes template literal
        `slide-${direction1}-${i + 1}`*/

    /* creating actual animation/ we are declaring an animation here like a function */
    @keyframes slide-in {
      from {
        transform: translateX(-100%);
      }
      to {
        transform: translateX(0);
      }
    }

    /* slide out animation */

    .slide-out-1 {
      animation: slide-out 0.2s linear both;
    }

    .slide-out-2 {
      animation: slide-out 0.2s linear both;
    }

    @keyframes slide-out {
      from {
        transform: translateX(0);
      }
      to {
        transform: translateX(-100%);
      }
    }

    /* ---Hamburger Menu ---*/

    /* animated hamburger icon from w3 schools */
    .menu-bars {
      position: fixed;
      top: 1rem;
      right: 2rem;
      z-index: 10;
      display: inline;
      cursor: pointer;
    }

    .bar-1,
    .bar-2,
    .bar-3 {
      width: 35px;
      height: 2px;
      background-color: #fff;
      margin: 8px 0;
      transition: 0.4s;
    }

    /* Rotate first bar */
    .change .bar-1 {
      /* transform: translate(-7px, 8px) rotate(-45deg); */
      transform: translate(0, 11px) rotate(-45deg);
    }

    .change .bar-2 {
      /* Fade out the second bar */
      opacity: 0;
    }

    /* Rotate last bar */
    .change .bar-3 {
      transform: translate(0, -11px) rotate(45deg);
    }
  }

  /* Header scrolled state */
  :global(.header-scrolled) .bar-1,
  :global(.header-scrolled) .bar-2,
  :global(.header-scrolled) .bar-3 {
    background-color: rgb(28 25 23);
  }

  /* Header scrolled transition */
  /* :global styles are scoped by default, meaning they only apply to elements within that component. 
  The :global() directive tells Astro that this selector should apply outside this component's scope. */
  :global(.bg-white\/30) .bar-1,
  :global(.bg-white\/30) .bar-2,
  :global(.bg-white\/30) .bar-3 {
    background-color: rgb(28 25 23);
  }
</style>
