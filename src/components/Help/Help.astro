---
import SectionLayout from "@/layouts/SectionLayout.astro";
import Footer from "../Footer/Footer.astro";
import { Content as Privacy } from "./Privacy.md";
import { Content as Cookies } from "./Cookies.md";

const privacyNotice = Object.values(
    import.meta.glob("./Help/*.md", { eager: true }),
);

const cookies = Object.values(
    import.meta.glob("./Help/Cookies.md", { eager: true }),
);

interface Props {
    h1Text?: string;
    heading01?: string;
    heading02?: string;
    heading03?: string;
    privacyNotice?: string;
    terms?: string;
    cookies?: string;
}

const {
    h1Text = "HELP",
    heading01 = "Privacy",
    // heading02 = "Terms",
    heading03 = "Cookies",
} = Astro.props;
---

<SectionLayout allowOverflow={true}>
    <section class="help--page bg-stone-black">
        <header class="help--header">
            <h1 class="lg__font">{h1Text}</h1>
        </header>

        <article class="help--grid">
            <!-- Left Navigation -->
            <nav class="help--nav">
                <ul class="help--nav__list">
                    <li class="button--nav">
                        <button
                            class="help--nav__link sm__font button--nav__text"
                            data-target="privacy"
                        >
                            {heading01}
                        </button>
                    </li>

                    <li class="button--nav">
                        <button
                            class="help--nav__link sm__font button--nav__text"
                            data-target="cookies"
                        >
                            {heading03}
                        </button>
                    </li>
                </ul>
            </nav>

            <!-- Right Content -->
            <main class="help--content">
                <aside class="help--content__inner">
                    <section id="privacy" class="help--section">
                        <h2 class="lg__font">{heading01}</h2>
                        <p class="sm__font"><Privacy /></p>
                    </section>

                    <section id="cookies" class="help--section">
                        <h2 class="lg__font">{heading03}</h2>
                        <p class="sm__font"><Cookies /></p>
                    </section>
                </aside>
            </main>
        </article>
    </section>
    <Footer />
</SectionLayout>

<script>
    // Add smooth scrolling navigation
    document.addEventListener("DOMContentLoaded", () => {
        const navLinks = document.querySelectorAll(".help--nav__link");

        //loop through each button
        navLinks.forEach((link) => {
            //e is the click event
            link.addEventListener("click", (e) => {
                //stop button default behaviour
                e.preventDefault();
                //get the value assigned to heading 'data-target' eg 'privacy' or 'cookies'
                const target = link.getAttribute("data-target");

                //targetElement  <section id="privacy"> find the element with id='privacy' in this case the privacy para not the heading.
                if (target) {
                    //added to prevent typescript error. "only proceed if 'target' is not null"
                    const targetElement = document.getElementById(target);

                    //if element with id-'privacy', scroll to that section/para.
                    if (targetElement) {
                        targetElement.scrollIntoView({
                            behavior: "smooth",
                            block: "start",
                        });

                        // ----- VISUALLY IDENFITY WHICH SECTION HAS BEEN CLICKED BY ADDING/REMOVING CSS CLASS 'active' -----
                        // (still inside the click handler) update the 'active' state. 'nl' and 'link' params represent the same thing, using nl so browser doesn't explode.
                        navLinks.forEach((nl) => {
                            //is this current button the same as the button that was clicked?
                            if (nl === link) {
                                // If it IS the same button that was clicked - add the CSS class 'active'
                                nl.classList.add("active");
                            } else {
                                // It is NOT the button that was clicked -remove the CSS class
                                nl.classList.remove("active");
                            }
                        });
                    }
                }
            });
        });

        //-----VISUALLY IDENFITY ACTIVE SECTION BASED ON SCROLL POSITION (in addition to clicking as above)-----

        //Find ALL para sections (privacy para, cookies para)
        const sections = document.querySelectorAll(".help--section");
        //Find the container of the para sections- use to define the scrolling area
        const scrollContainer = document.querySelector(".help--content");

        //----- 'IntersectionObserver' watches for when elements come into view!
        // It automatically creates an object with several built in properties including 'target'
        const observer = new IntersectionObserver(
            //'entries' represents a list of sections that just became visible or invisible (eg bottom of privacy, top of cookies)
            (entries) => {
                //'entry' Loop through one specific para at a time
                entries.forEach((entry) => {
                    //isIntersecting is true if section is visible, false if it disappeared
                    if (entry.isIntersecting) {
                        //entry object + target = entire DOM element + id = specifies each individual para sections
                        const id = entry.target.id;

                        //-----Visually update the navigation links by adding/removing CSS class 'active'-----
                        // Remember: navLinks is the name of our click handler!
                        navLinks.forEach((link) => {
                            // Find the button who's data-target matches the visible section's id
                            if (link.getAttribute("data-target") === id) {
                                //  Add the 'active' CSS class to that matching button
                                link.classList.add("active");
                                // Remove 'active' class from all links
                            } else {
                                link.classList.remove("active");
                            }
                        });
                    }
                });
            },
            {
                root: scrollContainer, // Use the scrolling container as root
                threshold: 0.2, //trigger when 30% of a section is visible
            },
        );

        sections.forEach((section) => observer.observe(section)); //tells the IntersectionObserver to watch EACH para section
    });
</script>

<style lang="scss">
    @use "@/styles/mixins" as *;

    .help--page {
        min-height: 100vh;
        background: var(--stone-black, #1a1a1a);
        padding: 6rem 2rem;
        width: 100%;
    }

    .help--header {
        padding: 1rem 1rem 3rem 1rem;
        // margin-bottom: 2rem;
        text-align: center;
        position: sticky;
        top: 0;
        background: var(--stone-black, #1a1a1a);
        z-index: 10;
        // padding: 1rem;

        @include for-size(tablet, up) {
            position: static; // Remove sticky on larger screens
            padding: 0 2rem 5rem 2rem;
            text-align: center;
        }
    }

    //GRID CONTAINER FOR ALL CONTENT APART FROM HEADER.
    .help--grid {
        // Mobile: a scrollable container
        @include for-size(phone, down) {
            display: flex;
            flex-direction: column;
            height: calc(100vh - 12rem);
            gap: 0;
            justify-content: center;
            align-items: center;
        }

        // max-width: 20vw;

        //larger screens: grid
        @include for-size(phone, up) {
            display: grid;
            grid-template-columns: 1fr 5fr;
            grid-template-rows: none;
            height: calc(100vh - 12rem);
            gap: 0;
        }

        @include for-size(desktop, up) {
            grid-template-columns: 1fr 5fr;
        }
    }

    //NAV LINKS CONTAINER (CHILD OF .help--grid)
    .help--nav {
        padding: 0 1rem 1rem 1rem;
        border-right: 1px solid rgba(255, 255, 255, 0.1);
        flex-shrink: 0; // Don't shrink on mobile
        justify-content: center;

        @include for-size(tablet, up) {
            padding: 2rem;
            flex-shrink: 1;
            padding: 0 2rem 2rem 2rem;
        }
    }

    //UL CLASS FOR NAV LINKS (CHILD OF .help--nav)
    .help--nav__list {
        list-style: none;
        margin: 0;
        padding-bottom: 3rem;
        max-width: 20vw;
        align-items: center;

        // Mobile: sticky vertical navigation
        position: sticky;
        top: 1rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;

        @include for-size(tablet, up) {
            top: 2rem;
            gap: 1rem;
            // Ensure it stays vertical on all larger screens
            flex-direction: column;
        }
    }

    //-----INDIVIDUAL NAV LINKS. NOT A CONTAINER FOR ALL LINKS-----
    .help--nav__link {
        background: none;
        border: none;
        color: inherit;
        text-align: center;
        width: 100%;
        cursor: pointer;
        transition: color 0.2s ease;
        padding: 0.25rem 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;

        @include for-size(tablet, up) {
            text-align: left;
            padding: 0.5rem 0;
            font-size: inherit;
            white-space: normal; // Allow wrapping
        }

        &:hover {
            // color: rgba(255, 255, 255, 0.8);

            // @include sm__font;
        }

        &.active {
            color: white;
            // font-weight: 600;

            // @include md__font;

            // &::before {
            //     // content: "→ ";
            //     // background-color: rgba(255, 255, 255, 0.6);
            // }
        }
    }

    //-----CONTAINER FOR MAIN CONTENT-----
    .help--content {
        flex: 1;
        overflow-y: auto;
        // padding: 1rem;
        box-sizing: border-box;
        padding: 3rem 0;
        width: 100%;
        border-top: 0.5px solid white;
        text-align: left;

        @include for-size(tablet, up) {
            // padding: 2rem; /* More padding on larger screens */
            padding: 2rem 0;
            border-top: 0px;
            // border-top: 0.5px solid white;
            border-left: 0.5px solid white;
        }

        @include for-size(desktop, up) {
        }
    }

    .help--content__inner {
        display: flex;
        flex-direction: column;
        gap: 3rem;
    }

    .help--section {
        // h2 {
        //     margin-bottom: 1.5rem;
        // }

        // p {
        //     line-height: 1.6;
        // }
    }
</style>
