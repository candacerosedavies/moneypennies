---
//NAV-BAR

import Hamburger from "./Hamburger.astro";
import LogoBrandNav from "../MoneypenniesLogo/LogoBrandNav.astro";

import Help from "../Help/Help.astro";
---

<a href="#main-content" class="link--skip">Skip to main content</a>

<!----- inline styling for JS  ----->
<header class="fixed top-0 left-0 right-0 z-50">
  <section class="header mx-auto nav-grid">
    <!-- Hamburger: only visible on mobile/tablet -->
    <Hamburger />
    <LogoBrandNav showTagline={true} abbreviated={false} />
    <!-- abreviate for smaller screens. tag line in the center? -->
    <nav
      class="nav__button-container leading-none"
      role="navigation"
      aria-label="Say hello on our contact page"
    >
      <li class="button--01 desktop__nav sm__font">
        <a href="/contact/" class="contact--button--position button--01__text"
          >SAY HELLO</a
        >
      </li>
    </nav>
  </section>
</header>

<script>
  // Nav bar styles that change on scroll - using scroll percentage
  const header = document.querySelector("header");

  //-----SHARED HELPER FUNCTION - CALCULATE SCROLL DISTANCE AS A PERCENTAGE-----
  function getScrollData() {
    //window.innerHeight: height of the broswer viewport * 0.8 (80%)/ headerScrollThreshold: 80% of viewport height, or innerHeight (innerHeight is the section of the page currently looking at)
    const headerScrollThreshold = window.innerHeight * 0.8;
    //How far down have we scrolled? window.scrollY: scrollY is a property of the window interface, returns no. of pixels by which the document is currentl scrolled vertically
    const currentScrollY = window.scrollY;
    //Calculate the maximum possible scrolling distance use 'document.body.scrollHeight' (height of the ENTIRE page). scrollHeight is a property of the 'element' interface, it's a measurement of the height of an element's content. Here we're referring to the <body> element found in BaseLayout... Minus the viewport height(differs per device) in the calculation to account for the fact our viewport takes up space. The actual scrollable distance is always less than the total content height!)
    const maxScroll = document.body.scrollHeight - window.innerHeight;
    //To get the percentage: take how far down the page we've scrolled, divide by the maximum distance we can SCROLL, times by 100
    const scrollPercentage = (currentScrollY / maxScroll) * 100;

    return {
      headerScrollThreshold,
      currentScrollY,
      maxScroll,
      scrollPercentage,
    };
  }

  //----- CHANGE HAMBURGER COLORS ON SCROLL: global so Hamburger.astro can use it
  // window.updateHamburgerColors = function () { CHANGED TO BELOW, TYPESCRIPT!
  window["updateHamburgerColors"] = function () {
    const {
      headerScrollThreshold,
      currentScrollY,
      scrollPercentage,
      maxScroll,
    } = getScrollData();

    const bar01 = document.querySelector(".bar-1");
    const bar02 = document.querySelector(".bar-2");

    if (bar01 && bar02) {
      //Helper functions to minimise repetition
      //added the ? to eliminate typescript error. First verify the element exists, then do the thing.
      function setWhiteBars() {
        bar01?.classList.remove("bar-1__open");
        bar01?.classList.add("bar-1__closed");
        bar02?.classList.remove("bar-2__open");
        bar02?.classList.add("bar-2__closed");
      }

      function setBlueBars() {
        bar01?.classList.remove("bar-1__closed");
        bar01?.classList.add("bar-1__open");
        bar02?.classList.remove("bar-2__closed");
        bar02?.classList.add("bar-2__open");
      }

      if (scrollPercentage > 85) {
        setWhiteBars(); // Footer state
      } else if (currentScrollY > headerScrollThreshold) {
        setBlueBars(); // Main content state
      } else {
        setWhiteBars(); // Hero state
      }
    }
  };

  //-----CHANGE NAV ELEMENT COLORS ON SCROLL-----
  const handleScroll = () => {
    const {
      headerScrollThreshold,
      currentScrollY,
      scrollPercentage,
      maxScroll,
    } = getScrollData();
    //get nav button container
    const navButton = document.querySelector(".nav__button-container li");
    const navButtonText = document.querySelector(".contact--button--position");

    //get nav logo
    const navLogo = document.querySelector(".logo--text__nav");

    //get individual menu bars
    const bar01 = document.querySelector(".bar-1");
    const bar02 = document.querySelector(".bar-2");

    // DEBUG 08/07/25: Log values to console
    console.log({
      currentScrollY,
      headerScrollThreshold,
      scrollPercentage: Math.round(scrollPercentage),
      maxScroll,
      state:
        scrollPercentage > 85
          ? "FOOTER"
          : currentScrollY > headerScrollThreshold
            ? "MAIN"
            : "HERO",
    });

    //-----IF SCROLLED MORE THAN 95% DOWN THE PAGE (the footer) use button--01 -----
    if (scrollPercentage > 85) {
      console.log("ðŸ”µ FOOTER STATE - White button");

      header?.classList.add("backdrop-blur-md", "fade-in");
      header?.classList.remove("bg-transparent");

      //----NAV-BAR BUTTON apply button--01 class (light)
      if (navButton) {
        navButton.className = "button--01 desktop__nav sm__font";
      }
      //----NAV-BAR BUTTON apply button--01__text (light)
      if (navButtonText) {
        navButtonText.className = "contact--button--position button--01__text";
      }

      //----NAV-BAR LOGO apply light style
      if (navLogo) {
        navLogo.classList.remove("logo--dark");
        navLogo.classList.add("logo--light");
      }

      //window.updateHamburgerColors(); CHANGED TO BELOW - TYPESCRIPT!
      window["updateHamburgerColors"]();
    } else if (currentScrollY > headerScrollThreshold) {
      //-----MAIN CONTENT STATE (LIGHT BACKGROUND/BLUE BUTTON)
      console.log("ðŸ”´ MAIN CONTENT STATE - Blue button");

      header?.classList.add("backdrop-blur-md", "fade-in");
      header?.classList.remove("bg-transparent");

      if (navButton) {
        navButton.className = "button--02 desktop__nav sm__font";
      }
      if (navButtonText) {
        navButtonText.className = "contact--button--position button--02__text";
      }

      //----NAV-BAR LOGO apply dark style
      if (navLogo) {
        navLogo.classList.remove("logo--light");
        navLogo.classList.add("logo--dark");
      }

      //window.updateHamburgerColors(); CHANGED TO BELOW - TYPESCRIPT!
      window["updateHamburgerColors"]();
    } else {
      // HERO SECTION STATE (DARK BACKGROUND/WHITE BUTTON)
      console.log("âšª HERO STATE - White button");

      header?.classList.add("bg-transparent");
      header?.classList.remove("backdrop-blur-md", "fade-in");

      if (navButton) {
        navButton.className = "button--01 desktop__nav sm__font";
      }
      if (navButtonText) {
        navButtonText.className = "contact--button--position button--01__text";
      }

      //----NAV-BAR LOGO apply light style
      if (navLogo) {
        navLogo.classList.remove("logo--dark");
        navLogo.classList.add("logo--light");
      }

      //----HAMBURGER apply white hamburger style
      if (bar01 && bar02) {
      }

      //window.updateHamburgerColors(); CHANGED TO BELOW - TYPESCRIPT!
      window["updateHamburgerColors"]();
    }
  };

  window.addEventListener("scroll", handleScroll);
  handleScroll(); //set initial state
</script>

<style lang="scss">
  // Logo positioning -  this styling was for when logo swapped sides. Delete? 26/06
  // :global(.button--nav) {

  // }

  //Changed to using grid for flexibility on nav item positioning
  .nav-grid {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: center;
    padding: 1rem;

    @include for-size(tablet, up) {
      padding: 0.5rem 1rem;
    }

    // Mobile: hamburger on left, logo on right
    @media (max-width: 768px) {
      grid-template-areas: "logo . hamburger";

      :global(.menu-bars) {
        grid-area: hamburger;
      }

      :global(.nav-brand-position) {
        grid-area: logo;
      }

      .nav__button-container {
        display: none;
      }
    }

    // Desktop: logo on left, contact on right
    @include for-size(tablet, up) {
      grid-template-areas: "logo . contact";

      :global(.menu-bars) {
        display: none;
      }

      :global(.nav-brand-position) {
        grid-area: logo;
      }

      .nav__button-container {
        grid-area: contact;
        display: block;
      }
    }
  }
  //-----skip to main content styling-----
  .link--skip {
    position: absolute;
    top: -40px;
    left: 6px;
    background: white;
    color: black;
    padding: 8px;
    text-decoration: none;
    z-index: 1000;

    &:focus {
      top: 6px; // Shows when tabbed to
    }
  }

  //-----LOGO-----

  // .container__logo::after {
  //   position: absolute;
  //   content: "";
  //   bottom: 0;
  //   left: 0; //line starts 10% in from the left
  //   width: 100%; //reduced to 80% from 100% so the line starts 10% further in from the right
  //   height: 2px;
  //   //background 3px high = looks like a border-bottom but we have more control over it/can animate
  //   transition: all 0.25s ease-in;
  //   z-index: 3;

  //   /* Above everything else */
  // }

  // .container__logo {
  //   display: flex;
  //   // align-items: center;
  //   margin-left: 1rem; // Use margin instead of padding to control position without affecting size

  //   font-family: "zilla slab", sans-serif !important;
  //   font-weight: 200;
  //   font-style: italic;

  //   @include for-size(tablet, up) {
  //     margin-left: 2rem;
  //   }
  // }

  .logo {
    height: 7vh;
    width: auto; //maintains aspect ratio
    object-fit: contain; //ensure logo fits within dimensions

    @include for-size(tablet, up) {
      height: 8vh;
    }
  }

  .button--01:hover .button--01__text {
    // color: var(--off-white, #f6f0e7);
    color: #22219b;
    // color: white;
  }

  // // header.scrolled .button--01 {
  // //   .button--01__text {
  // //     color: black;
  // //   }

  // &:hover .button--01__text {
  //   color: var(--mp-blue, #22219b);
  // }

  // &:hover::after {
  //   background-color: black;
  // }

  //-----HAMBURGER VISIBILITY------

  .desktop__nav {
    display: none; // Hidden on mobile/tablet

    @include for-size(phone, up) {
      display: flex; // Shows on desktop
    }
  }

  @include for-size(tablet, down) {
    .desktop__nav {
      display: none !important; //hide desktop nav stylings smaller screens
    }
  }

  .contact--button--position {
    display: none;

    @include for-size(tablet, up) {
      display: block;
    }
  }
</style>
