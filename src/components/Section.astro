---
interface Props {
  variant?: "image" | "color";
  background?: string;
  imageFolder?: "award" | "celebrate" | "connect" | "unlock";
  imageName?: string;
  className?: string;
  maskText?: string;
  subtitle?: string;
  textStyle?: "masked" | "normal"; // New prop to control text style
}

const {
  variant = "color",
  background = "bg-blue-500",
  imageFolder,
  imageName,
  className = "",
  maskText = "",
  subtitle = "",
  textStyle = "normal", // Default to normal text style
} = Astro.props;

const imagePath =
  variant === "image" && imageFolder && imageName
    ? `/images/${imageFolder}/${imageName}`
    : "";

const sectionClass =
  variant === "image" ? "section-image" : `section-color ${background}`;

const uniqueImageClass =
  variant === "image"
    ? `bg-${imageFolder}-${imageName.replace(/\./g, "-")}`
    : "";
---

<section class={`${sectionClass} ${className} ${uniqueImageClass}`}>
  <div class="overlay"></div>

  <div class="content-container">
    {
      maskText && textStyle === "masked" ? (
        <div class="masked-container">
          <h1 class="masked-text">{maskText}</h1>

          <h1 class="masked-text-outline">{maskText}</h1>
        </div>
      ) : maskText && textStyle === "normal" ? (
        <h1 class="normal-text">{maskText}</h1>
      ) : null
    }

    <div class="content">
      <h2 class="title">
        <slot />
      </h2>
      {subtitle && <p class="subtitle">{subtitle}</p>}
    </div>
  </div>
</section>

<style>
  /* ... existing styles ... */

  .normal-text {
    font-size: clamp(4rem, 15vw, 12rem);
    font-weight: 900;
    font-family: "Roboto", sans-serif;
    color: white;
    line-height: 1;
    margin-bottom: 2rem;
  }

  .section-image {
    min-height: 100vh;
    width: 100%;
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
  }

  /* Handle background image using global classes */
  :global(.bg-award-pexels-n-voitkevich-6532369-jpg) {
    background-image: url("/images/award/pexels-n-voitkevich-6532369.jpg");
  }

  :global(.bg-celebrate-pexels-vladvictoria-12478054-jpg) {
    background-image: url("/images/celebrate/pexels-vladvictoria-12478054.jpg");
  }

  :global(.bg-connect-pexels-didsss-2127522-jpg) {
    background-image: url("/images/connect/pexels-didsss-2127522.jpg");
  }

  .section-color {
    min-height: 100vh;
    width: 100%;
    position: relative;
    overflow: hidden;
  }

  .overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.3);
  }

  .content-container {
    position: relative;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .masked-container {
    position: relative;
    margin-bottom: 2rem;
  }

  .masked-text {
    font-size: clamp(4rem, 15vw, 12rem);
    font: "roboto";
    font-weight: 300;
    color: transparent;
    background-clip: text;
    -webkit-background-clip: text;
    background-color: white;
    mix-blend-mode: overlay;
    line-height: 1;
  }

  .normal-text {
    font-size: clamp(4rem, 15vw, 12rem);
    font: "roboto";
    font-weight: 300;
    color: white;
    line-height: 1;
  }

  .masked-text-outline {
    position: absolute;
    inset: 0;
    font-size: clamp(4rem, 15vw, 12rem);
    font-weight: 300;
    color: rgba(255, 255, 255, 0.1);
    pointer-events: none;
    line-height: 1;
  }

  .content {
    text-align: center;
    z-index: 1;
  }

  .title {
    font-size: clamp(2rem, 5vw, 4rem);
    font-weight: 300;
    color: white;
    margin-bottom: 1rem;
  }

  .subtitle {
    font-family: "roboto";
    font-size: clamp(1rem, 2vw, 1.25rem);
    color: rgba(255, 255, 255, 0.8);
    max-width: 36rem;
    margin: 0 auto;
  }
</style>
