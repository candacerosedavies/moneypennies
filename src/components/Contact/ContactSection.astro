---
import SectionLayout from "@/layouts/SectionLayout.astro";

const contactHeading = "Start Connecting";
const contactPara =
    " Lorem ipsum dolor sit amet consectetur adipisicing elit. Nam impedit dolore excepturi ullam?";
---

<SectionLayout variant="color">
    <!-- Pop up message submitted message -->

    <!-- <dialog class="submit--modal">
        <article class="submit--container">
            <dotlottie-player
                class="tiger-animation"
                alt="roaring-geometric-colorful-tiger"
                src="https://lottie.host/5de71444-5f88-4614-b67f-e428ffcca953/bTHZNrMBkU.lottie"
                background="transparent"
                speed="1"
                style="width: 300px; height: 300px"
                loop
                autoplay></dotlottie-player>
          <img src="images/lost.gif" alt="crying-face-gif" /> 
            <h2>Game Over!</h2>
            <p>The correct word was:</p>
            <button class="play-again">Play Again</button>
        </article>
    </dialog> 
    
    TEMPORARY POPUP-->

    <div id="modal-overlay" class="modal-overlay hidden">
        <div class="modal-content">
            <div class="modal-header">
                <button id="close-modal" class="close-button">&times;</button>
            </div>
            <div class="modal-body">
                <div class="success-icon">✓</div>
                <h3>Connections That Count</h3>
                <p id="modal-message">
                    Sit back and relax while we prepare your bespoke set of
                    connection data. We'll be in touch very soon.
                </p>
            </div>
            <div class="modal-footer">
                <button id="modal-ok" class="modal-button">Perfect!</button>
            </div>
        </div>
    </div>

    <section class="contact-section">
        <!-- parallax not currently in use -->
        <!-- <section class="parallax-container"> -->
        <!-- Main content wrapper -->
        <main class="content-container">
            <!-- Header section with heading and description -->
            <header class="copy-container">
                <h1 class="heading">{contactHeading}</h1>
                <p class="para">
                    {contactPara}
                </p>
            </header>

            <!-- Contact form section -->
            <section class="form-container">
                <!-- INVISIBLE FORM FIELDS - CONFIGURE FORM TO WORK WITH WEB3FORMS, SET SUBMISSION SUBJECT LINE, PREVENT SPAM
                 <form> action - defines the location (URL) where the form's collected data should be sent when it is submitted.
                 <input> 1 -  type is hidden/ input hosts the Web3Forms access key and a unique identifier
                 <input> 2 -  type is hidded/ sets the email subject line received when form is submitted. Currently set to 'new submission from moneypennies'
                 <input> 3 - type is checkbox. Purpose is spam prevention. Hidden from real users but bots might fill it out allowing Web3Forms to filter out spam submissions. 
                 (Spam prevention not as sophisticated as a reCAPTCHA check box. Will need to amend if Suzanne receives spam.)
                 <div> is hcaptcha form-->

                <form
                    action="https://api.web3forms.com/submit"
                    method="POST"
                    id="form"
                    class="contact-form"
                >
                    <input
                        type="hidden"
                        name="replyto"
                        value="candacerosedavies@gmail.com"
                    />

                    <input
                        type="hidden"
                        name="access_key"
                        value="92c59d11-5b7e-4cfb-89b6-51c8d2e1ba5f"
                    />
                    <input
                        type="hidden"
                        name="subject"
                        value="New Submission From Moneypennies site 2.0"
                    />
                    <input type="checkbox" name="botcheck" class="hidden" />

                    <!-- VISIBLE FORM FIELDS-->
                    <fieldset class="form-grid">
                        <legend class="sr-only">Contact Information</legend>

                        <!-- Name field -->
                        <p class="form-field">
                            <label for="name" class="sr-only">Name</label>
                            <input
                                type="text"
                                id="name"
                                name="name"
                                placeholder="Name"
                                required
                            />
                        </p>

                        <!-- Email field -->
                        <p class="form-field">
                            <label for="email" class="sr-only">Email</label>
                            <input
                                type="email"
                                id="email"
                                name="email"
                                placeholder="Email"
                                required
                            />
                        </p>

                        <!-- Phone field -->
                        <p class="form-field">
                            <label for="phone" class="sr-only">Phone</label>
                            <input
                                type="tel"
                                id="phone"
                                name="phone"
                                placeholder="Phone"
                                required
                            />
                        </p>

                        <!-- Message field (spans both columns) -->
                        <p class="form-field message-field">
                            <label for="message" class="sr-only">Message</label>
                            <textarea
                                id="message"
                                name="message"
                                placeholder="How can we help?"
                                rows="3"
                                required></textarea>
                        </p>
                    </fieldset>

                    <!-- Submit button -->
                    <footer class="button-container">
                        <button type="submit" class="submit-button">
                            start connecting
                        </button>
                    </footer>

                    <!-- Result message (initially hidden) -->
                    <p
                        id="result"
                        class="result-message hidden"
                        role="status"
                        aria-live="polite"
                    >
                    </p>
                </form>
            </section>
        </main>
        <!-- closing parallax container tag not currently in use -->
        <!-- </section> -->
    </section>
</SectionLayout>

<script src="https://web3forms.com/client/script.js" async defer></script>

<script>
    const form = document.getElementById("form");
    const result = document.getElementById("result");

    // Define modal functions OUTSIDE the form submit handler
    function showModal(message, type) {
        const modal = document.getElementById("modal-overlay");
        const messageEl = document.getElementById("modal-message");
        const icon = document.querySelector(".success-icon");

        // Add null checks
        if (!modal || !messageEl || !icon) {
            console.error("Modal elements not found");
            return;
        }

        messageEl.textContent = message;

        if (type === "error") {
            icon.textContent = "⚠";
            icon.style.color = "#ef4444";
        } else {
            icon.textContent = "✓";
            icon.style.color = "#10b981";
        }

        modal.classList.remove("hidden");
    }

    function closeModal() {
        const modal = document.getElementById("modal-overlay");
        if (modal) {
            modal.classList.add("hidden");
        }
    }

    // Form submit handler with proper type checking
    if (form) {
        form.addEventListener("submit", async function (e) {
            e.preventDefault(); // This prevents the redirect

            // Type assertion for form
            const formElement = form;
            if (!(formElement instanceof HTMLFormElement)) {
                console.error("Form element is not a valid form");
                return;
            }

            const formData = new FormData(formElement);
            const object = Object.fromEntries(formData);
            const json = JSON.stringify(object);

            // Check if result element exists before using it
            if (result) {
                result.innerHTML = "Sending message...";
                result.className = "result-message text-yellow-300";
                result.style.display = "block";
            }

            try {
                const response = await fetch(
                    "https://api.web3forms.com/submit",
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            Accept: "application/json",
                        },
                        body: json,
                    },
                );

                const responseData = await response.json();

                // Hide the inline result message
                if (result) {
                    result.style.display = "none";
                }

                // Show modal instead
                if (response.status === 200) {
                    showModal(
                        "Sit back and relax while we prepare your bespoke set of connection data. We'll be in touch very soon.",
                        "success",
                    );
                    // Type assertion for reset method
                    if (formElement instanceof HTMLFormElement) {
                        formElement.reset();
                    }
                } else {
                    showModal(
                        responseData.message ||
                            "Something went wrong. Please try again.",
                        "error",
                    );
                }
            } catch (error) {
                console.log(error);
                if (result) {
                    result.style.display = "none";
                }
                showModal(
                    "Network error. Please check your connection and try again.",
                    "error",
                );
            }
        });
    }

    // Add event listeners for closing modal (wait for DOM to be ready)
    document.addEventListener("DOMContentLoaded", function () {
        // Modal close event listeners with null checks
        const closeButton = document.getElementById("close-modal");
        const okButton = document.getElementById("modal-ok");
        const modalOverlay = document.getElementById("modal-overlay");

        if (closeButton) {
            closeButton.addEventListener("click", closeModal);
        }

        if (okButton) {
            okButton.addEventListener("click", closeModal);
        }

        if (modalOverlay) {
            modalOverlay.addEventListener("click", function (e) {
                if (e.target === this) closeModal(); // Close when clicking outside
            });
        }
    });

    // Clear form when page loads (handles back button)
    window.addEventListener("pageshow", function (event) {
        if (event.persisted) {
            const formElement = document.getElementById("form");
            if (formElement instanceof HTMLFormElement) {
                formElement.reset();
            }
        }
    });

    // Also clear form on page load
    document.addEventListener("DOMContentLoaded", function () {
        const formElement = document.getElementById("form");
        if (formElement instanceof HTMLFormElement) {
            formElement.reset();
        }
    });
</script>

<style lang="scss">
    // TEMPORARY POPUP STYLES

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.7);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;

        &.hidden {
            display: none;
        }
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        padding: 2rem;
        max-width: 400px;
        width: 90%;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        text-align: center;
        position: relative;
    }

    .modal-header {
        position: absolute;
        top: 10px;
        right: 15px;
    }

    .close-button {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #999;

        &:hover {
            color: #333;
        }
    }

    .success-icon {
        font-size: 3rem;
        color: #10b981;
        margin-bottom: 1rem;
    }

    .modal-body h3 {
        margin-bottom: 1rem;
        color: #333;
    }

    .modal-body p {
        margin-bottom: 1.5rem;
        color: #666;
    }

    .modal-button {
        background-color: var(--mp-blue, #22219b);
        color: white;
        border: none;
        padding: 0.75rem 2rem;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;

        &:hover {
            opacity: 0.9;
        }
    }

    //TEMP STYLES END

    .contact-section {
        position: relative;
    }

    .parallax-container {
        min-height: 100vh;
        background-attachment: fixed;
        // background-image: url("/images/connect/pexels-didsss-2127522.jpg");
        background-size: cover;
        background-position: center;
        display: flex;
        flex: 1;
        width: 100%;
        margin: 0;
        box-sizing: border-box;
    }

    .overlay {
        position: absolute;
        inset: 0;
        // background-color: rgba(0, 0, 0, 0.4);
    }

    .content-container {
        position: relative;
        z-index: 10;
        min-width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;

        // @include for-size(tablet, up) {
        //     padding: 6rem 2rem;
        //     margin: 1rem;
        // }
        padding: 2rem 1rem;

        @include for-size(tablet, up) {
            padding: 3rem 2rem;
        }
        @include for-size(desktop, up) {
            flex-direction: row-reverse;
            justify-content: flex-start;
            gap: 10rem;
            padding: 2rem 3rem;

            // flex: 0 0 30%;
        }
    }

    .copy-container {
        @include for-size(desktop, up) {
            justify-content: flex-start;
            padding-bottom: 80vh;
            // padding-right: 5rem;
            flex: 0 0 50%;
        }
    }

    .form-container {
        // width: 80%;
        min-width: 90%;

        @include for-size(tablet, up) {
            min-width: 80%;
        }

        @include for-size(desktop, up) {
            min-width: 30%;
            justify-content: flex-end;
            padding-top: 55vh;
        }
    }

    .heading {
        font-size: clamp(1rem, 14vw, 8rem) !important;
        font-weight: 400;
        // color: white;
        text-align: right;
        line-height: 4rem;
        padding-top: 4rem;
        padding-bottom: 1.5rem;
        min-width: 100%;

        @include for-size(tablet, up) {
            font-size: clamp(2rem, 15vw, 8rem);
            margin-bottom: 3rem;
            text-align: left;
            line-height: 6rem;
        }

        @include for-size(desktop, up) {
            font-size: clamp(2rem, 10vw, 3rem) !important;
            // align-self: self-start;
            text-align: right;
            margin-bottom: 0;
            padding-bottom: 0vh;
        }
    }

    .para {
        font-size: clamp(1rem, 3vh, 3rem) !important;
        // THIS IS NOT WORKING font-weight: 200;
        // color: white;
        min-width: 100%;

        @include for-size(tablet, up) {
            // margin-bottom: 3rem;
            text-align: right;
            max-width: 80%;
        }

        @include for-size(desktop, up) {
            text-align: right;
            margin-bottom: 0;
        }
    }

    // .contact-form {
    //     width: 100%;
    // }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 0.5rem;

        @include for-size(tablet, up) {
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        @include for-size(desktop, up) {
            grid-template-columns: 1fr;
            gap: 1rem;
        }
    }

    .form-field {
        border-bottom: 0.5px solid var(--mp-blue, #22219b);
        padding-bottom: 0.25rem;
        transition: border-color 0.3s;

        &:focus-within {
            // border-color: white;
        }

        input,
        textarea {
            width: 100%;
            background-color: transparent;
            // color: white;
            font-size: clamp(1rem, 2vh, 4rem);
            padding: 0.5rem 0;

            &::placeholder {
                // color: white;
                opacity: 0.6;
            }

            &:focus {
                outline: none;
            }
            @include for-size(tablet, up) {
                font-size: clamp(1rem, 3vh, 4rem);
            }
            @include for-size(desktop, up) {
                font-size: clamp(1rem, 6vh, 5rem);
            }
        }

        textarea {
            resize: none;
        }
    }

    .message-field {
        grid-template-columns: span 1;
        @include for-size(tablet, up) {
            grid-column: span 1;
        }

        @include for-size(desktop, up) {
            grid-column: span 1;
        }
    }

    .button-container {
        margin-top: 0.5rem;
        display: flex;
        justify-content: center;

        @include for-size(desktop, up) {
            margin-top: 0.5rem;
        }
    }

    .submit-button {
        background-color: transparent;
        font-size: clamp(1rem, 3vh, 8rem) !important;
        margin-bottom: 2rem;
        margin-top: 2rem;
        align-item: center;
        // color: white;
        font-weight: 500;
        padding: 0.5rem 1rem;
        border: 0.5px solid #a9a9ac;
        border-radius: 30px;
        cursor: pointer;
        transition: background-color 0.3s;

        &:hover {
            // background-color: rgba(255, 255, 255, 0.3);
            // opacity: 0.6;
            color: black;
            border: 1px solid var(--mp-blue, #22219b);
        }

        @include for-size(tablet, up) {
            font-size: clamp(1rem, 3vh, 4rem);
            align-self: center;
        }
        @include for-size(desktop, up) {
            font-size: clamp(1rem, 3.5vh, 4rem);
            align-self: center;
        }
    }

    .result-message {
        margin-top: 1rem;
        padding: 0.75rem;
        text-align: center;

        &.hidden {
            display: none;
        }
    }

    // Helper class that will be applied by JS
    .text-yellow-300 {
        color: #fde047;
    }

    .text-green-300 {
        color: #86efac;
    }

    .text-red-300 {
        color: #fca5a5;
    }
</style>
