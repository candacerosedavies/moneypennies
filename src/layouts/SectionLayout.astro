---
interface Props {
  variant?: "image" | "color";
  background?: string;
  textStyle?: "masked" | "normal";
  imageFolder?: string;
  imageName?: string;
  className?: string;
  // contentPosition?: "left" | "center" | "right";
  // verticalAlignment?: "top" | "center" | "bottom";
  hasParallax?: boolean;
  parallaxImages?: {
    src: string;
    left: string;
    top: string;
    width: number;
    speed: number;
    initialOffset: number;
  }[];
  heightVariant?: "tall" | "normal";
}

const {
  variant = "",
  textStyle = "",
  background = "",
  imageFolder,
  imageName,
  className = "",
  // contentPosition = "",
  // verticalAlignment = "",
  heightVariant = "",
} = Astro.props;

const textVariant = textStyle === "masked" ? "masked-text" : "normal-text";

const sectionClass =
  variant === "image" ? "section-image" : `section-color ${background}`;

//was getting a typescript error with const uniqueImageClass = variant === ? `bg-${imageFolder}-${imageName?.replace(/\./g, "-")}`: "";
//Changed to the below
let uniqueImageClass = "";
if (variant === "image" && imageFolder && imageName) {
  // We only get here if all three values exist
  uniqueImageClass = `bg-${imageFolder}-${imageName?.replace(/\./g, "-")}`;
}

// const alignmentClasses = `
//   content-container
//   items-${contentPosition === "center" ? "center" : contentPosition === "right" ? "end" : "start"}
//   justify-${verticalAlignment === "center" ? "center" : verticalAlignment === "top" ? "start" : "end"}
// `.trim();

const backgroundImageStyle =
  variant === "image" && imageFolder && imageName
    ? `
    .bg-${imageFolder}-${imageName.replace(/\./g, "-")} {
      background-image: url("/images/${imageFolder}/${imageName}");
    }
  `
    : "";
---

<section
  class={`${sectionClass} ${className} ${uniqueImageClass} ${textVariant} ${textStyle} ${heightVariant === "tall" ? "tall-section" : "normal-section"}`}
  id="main-content"
>
  <div class="overlay"></div>

  <slot />
</section>

<style>
  .section-image {
    min-height: 100vh;
    /* width: 100%; */
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
  }

  .section-color {
    min-height: 100vh;
    /* width: 100%; */
    position: relative;
    overflow: hidden;
  }

  .overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.3);
  }

  .tall-section {
    min-height: 150vh;

    /* width: 100%; */
    overflow: hidden;
  }

  .normal-section {
    min-height: 100vh;
    height: 100vh; /* Ensure exact 100vh */
    /* width: 100%; */
    overflow: hidden;
  }

  .masked-container {
    padding: 2rem 6rem;
    /* max-width: 1400px; */

    font-size: 1rem;
    font-weight: 700;
  }

  .normal-text {
    font-size: 1rem;
    font-weight: 500;
    color: white;
    line-height: 1;
    position: relative;
  }

  .masked-text {
    font-size: 1rem;
    font-weight: 700;
    color: transparent;
    background-image: `$textVariant`;
    -webkit-background-clip: text;
    background-color: white;
    mix-blend-mode: overlay;
    line-height: 1;
  }
</style>

<!-- All global styles in one place -->
<style is:global>
  /* Alignment classes */
  .items-start {
    align-items: flex-start !important;
  }
  .items-center {
    align-items: center !important;
  }
  .items-end {
    align-items: flex-end !important;
  }

  .justify-start {
    justify-content: flex-start !important;
  }
  .justify-center {
    justify-content: center !important;
  }
  .justify-end {
    justify-content: flex-end !important;
  }
</style>

<!-- /* Dynamic background image styles */ -->
{backgroundImageStyle && <style is:global set:html={backgroundImageStyle} />}
