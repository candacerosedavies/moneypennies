---
interface Props {
  variant?: "image" | "color";
  background?: string;
  textStyle?: "masked" | "normal";
  imageFolder?: string;
  imageName?: string;
  className?: string;
  hasParallax?: boolean;
  parallaxImages?: {
    src: string;
    left: string;
    top: string;
    width: number;
    speed: number;
    initialOffset: number;
  }[];
  heightVariant?: "tall" | "normal";
  allowOverflow?: boolean;

  textWidth?: "narrow" | "standard" | "wide" | "full";
}

const {
  variant = "",
  textStyle = "",
  background = "",
  className = "",
  heightVariant = "",
  textWidth = "standard",
} = Astro.props;

const textVariant = textStyle === "masked" ? "masked-text" : "normal-text";
const sectionClass =
  variant === "image" ? "section-image" : `section-color ${background}`;
const textWidthClass = `text-width-${textWidth}`;
---

<section
  class={`${sectionClass} ${className} ${textVariant} ${textStyle} ${heightVariant === "tall" ? "tall-section" : "normal-section"} ${textWidthClass}`}
  id="main-content"
>
  <slot />
</section>

<style>
  .section-image {
    min-height: 100vh;
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
  }

  .section-color {
    min-height: 100vh;
    position: relative;
    overflow: hidden;
  }

  .tall-section {
    min-height: 150vh;
    overflow: hidden;
  }

  .normal-section {
    min-height: 100vh;
    height: 100vh;
    overflow: hidden;
  }
</style>

<style is:global lang="scss">
  // ----- Text width control classes ----- //
  .text-width-narrow {
    h1,
    h2,
    h3,
    p,
    .text-element {
      width: 70vw;
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      padding: 0 1rem;

      @include for-size(phone, up) {
        width: 80%;
        max-width: 600px;
      }

      @include for-size(650px, up) {
        padding: 0 2rem;
      }

      @include for-size(tablet, up) {
        width: 60%;
        max-width: 600px;
        padding: 0;
      }
    }
  }

  .text-width-standard {
    h1,
    h2,
    h3,
    p,
    .text-element {
      // Narrowest phones first
      width: 80vw;
      max-width: 800px;
      margin-left: auto;
      margin-right: auto;
      padding: 0 1rem;

      @include for-size(phone, up) {
        width: 85%; //percentage for larger phones for more control
        max-width: 700px; // Prevents getting too wide
      }

      @include for-size(650px, up) {
        padding: 0 2rem; // Extra padding in this range
      }

      @include for-size(tablet, up) {
        width: 70%;
        max-width: 800px;
        padding: 0; //resetting padding here, let container do it's thang
      }
    }
  }

  .text-width-wide {
    h1,
    h2,
    h3,
    p,
    .text-element {
      width: 90vw;
      max-width: 1000px;
      margin-left: auto;
      margin-right: auto;
      padding: 0 1rem;

      .text-width-wide {
        // (phone, up) not essential but will ensure smooth transitions from the narrowest phone to tablets and browsers
        @include for-size(phone, up) {
          width: 90%;
          max-width: 1000px; // Keep same as tablet
        }
      }

      @include for-size(650px, up) {
        padding: 0 2rem;
      }

      @include for-size(tablet, up) {
        width: 80%;
        max-width: 1000px;
        padding: 0;
      }
    }
  }

  .text-width-full {
    h1,
    h2,
    h3,
    p,
    .text-element {
      width: 100%;
    }
  }

  /* Alignment classes */
  .items-start {
    align-items: flex-start !important;
  }
  .items-center {
    align-items: center !important;
  }
  .items-end {
    align-items: flex-end !important;
  }

  .justify-start {
    justify-content: flex-start !important;
  }
  .justify-center {
    justify-content: center !important;
  }
  .justify-end {
    justify-content: flex-end !important;
  }
</style>
