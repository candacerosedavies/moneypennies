---
interface Props {
  variant: "image" | "color";
  background?: string;
  imageFolder?: string;
  imageName?: string;
  className?: string;
  contentPosition?: "left" | "center" | "right";
  verticalAlignment?: "top" | "center" | "bottom";
}

const {
  variant,
  background = "bg-transparent",
  imageFolder,
  imageName,
  className = "",
  contentPosition = "left",
  verticalAlignment = "center",
} = Astro.props;

const sectionClass =
  variant === "image" ? "section-image" : `section-color ${background}`;
const uniqueImageClass =
  variant === "image"
    ? `bg-${imageFolder}-${imageName.replace(/\./g, "-")}`
    : "";

const alignmentClasses = `
  content-container
  items-${contentPosition === "center" ? "center" : contentPosition === "right" ? "end" : "start"}
  justify-${verticalAlignment === "center" ? "center" : verticalAlignment === "top" ? "start" : "end"}
`.trim();

console.log("Generated classes:", alignmentClasses);
---

<section class={`${sectionClass} ${className} ${uniqueImageClass}`}>
  <div class="overlay"></div>
  <div class={alignmentClasses}>
    <slot />
  </div>
</section>

<style>
  .section-image {
    min-height: 100vh;
    width: 100%;
    background-size: cover;
    background-position: center;
    position: relative;
    overflow: hidden;
  }

  /* Handle background image using global classes */
  :global(.bg-award-pexels-n-voitkevich-6532369-jpg) {
    background-image: url("/images/award/pexels-n-voitkevich-6532369.jpg");
  }

  :global(.bg-celebrate-pexels-vladvictoria-12478054-jpg) {
    background-image: url("/images/celebrate/pexels-vladvictoria-12478054.jpg");
  }

  :global(.bg-connect-pexels-didsss-2127522-jpg) {
    background-image: url("/images/connect/pexels-didsss-2127522.jpg");
  }

  /* Add your new image class */
  :global(.bg-connect-pexels-vladvictoria-12478054-jpg) {
    background-image: url("/images/connect/pexels-vladvictoria-12478054.jpg");
  }

  .section-color {
    min-height: 100vh;
    width: 100%;
    position: relative;
    overflow: hidden;
  }

  .overlay {
    position: absolute;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.3);
  }

  .content-container {
    position: relative;
    height: 100vh;
    width: 100%;
    font-family: "Roboto", sans-serif;
    display: flex;
    flex-direction: column;
    padding: 2rem;
  }

  .masked-container {
    padding: 2rem 6rem;
    max-width: 1400px;
  }

  /* Add global alignment classes */
  :global(.items-start) {
    align-items: flex-start !important;
  }
  :global(.items-center) {
    align-items: center !important;
  }
  :global(.items-end) {
    align-items: flex-end !important;
  }

  :global(.justify-start) {
    justify-content: flex-start !important;
  }
  :global(.justify-center) {
    justify-content: center !important;
  }
  :global(.justify-end) {
    justify-content: flex-end !important;
  }
</style>
