@use "sass:map";

//---RESPONSIVE DESIGN MIXINS---
$breakpoints: (
    phoneSm: 420px,
    phone: 680px,
    tablet: 770px,
    tabletLg: 1024px,
    desktop: 1025px,
    desktopLg: 1600px
);

@mixin for-size($breakpoint, $direction: down, $orientation: null) {

    // If the breakpoint exists in the map
    @if map.has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value
        $breakpoint-value: map.get($breakpoints, $breakpoint);

        // Check if orientation is specified
        @if $orientation ==null {

            // No orientation - standard query
            //min-width/up = this breakpoint and larger. For mobile
            @if $direction ==up {
                @media (min-width: $breakpoint-value) {
                    @content;
                }
            }

            //max-width/down = this breakpoint and smaller.
            @else if $direction ==down {
                @media (max-width: $breakpoint-value) {
                    @content;
                }
            }
        }

        @else {

            // With orientation
            @if $direction ==up {
                @media (min-width: $breakpoint-value) and (orientation: #{$orientation}) {
                    @content;
                }
            }

            @else if $direction ==down {
                @media (max-width: $breakpoint-value) and (orientation: #{$orientation}) {
                    @content;
                }
            }
        }
    }

    // If the breakpoint doesn't exist in the map, use a manual breakpoint
    @else {

        // Similar logic for custom breakpoints with orientation
        @if $orientation ==null {
            @if $direction ==up {
                @media (min-width: $breakpoint) {
                    @content;
                }
            }

            @else if $direction ==down {
                @media (max-width: $breakpoint) {
                    @content;
                }
            }
        }

        //no need to define what 'landscape' or 'portrait' means. CSS knows.
        @else {
            @if $direction ==up {
                @media (min-width: $breakpoint) and (orientation: #{$orientation}) {
                    @content;
                }
            }

            @else if $direction ==down {
                @media (max-width: $breakpoint) and (orientation: #{$orientation}) {
                    @content;
                }
            }
        }
    }
}



// ----- FONTS -----

// In mixins.scss
@mixin lg__font {
    font-size: clamp(2rem, 6vw, 3rem);

    @include for-size(tablet, up) {
        font-size: clamp(3rem, 7vw, 3.5rem);
    }
}

@mixin md__font {
    font-size: clamp(1.2rem, 3vw, 1.8rem);

    @include for-size(tablet, up) {
        font-size: clamp(2rem, 3vw, 3.5rem);
    }
}

@mixin sm__font {
    font-size: clamp(0.8rem, 3vw, 1.2rem);

    @include for-size(tablet, up) {
        font-size: clamp(0.8rem, 3vw, 1rem);
    }
}

@mixin tn__font {
    font-size: clamp(0.5rem, 2vw, 0.8rem);

    @include for-size(tablet, up) {
        font-size: clamp(0.5rem, 2vw, 0.8rem);
    }
}

//BUTTON MIXINS
//----- ANIMATED NAV BUTTONS ------
.button--01 {
    position: relative; //establish a reference point for any absolutely positioned children inside it.
    display: inline-block;
    cursor: pointer;
    border: none;
    background-color: transparent;
    overflow: hidden; //added to contain the animated element
    border-radius: 5px;
    padding: 0.5rem 0.5rem 0.5rem 0.5rem;
    z-index: 5; //base z index for the container

    @include for-size(tablet, up) {

        padding: 0.5rem 0.5rem 0.5rem 0.5rem;

    }

}


.button--01::before,
.button--01::after {
    pointer-events: none; // Only disable on pseudo-elements
}


.button--01 .button--01__text {
    position: relative; //establish a reference point for any absolutely positioned children inside it.
    display: inline-block;
    color: var(--off-white, #f6f0e7);
    transition: all 0.3s ease-in;
    z-index: 2; //keep the text above the animation
    @include sm__font;


    @include for-size (tablet, up) {
        // font-size: clamp(1rem, 3vw, 1.5rem);

    }
}

//BACKGROUND animation - not visible
.button--01::before {
    position: absolute; //positioned relative to their nearest positioned ancestor (which is the button element)
    content: "";
    top: 0;
    left: -100%; //positioned out of sight on the left (NOT hovering)
    width: 100%;
    height: 100%;
    background-color: var(--off-white, #f6f0e7);



    // border: 0.5px solid black;
    transition: all 0.3s ease-in;
    z-index: 1;
}


//ON HOVER STYLES 

.button--01:hover .button--01__text {
    // color: var(--off-white, #f6f0e7);
    color: #22219b;

}

//on hover BACKGROUND becomes visible - slides in from the left. 
.button--01:hover::before {
    left: 0; //background is visible. Travels in (-100%) from the left 

}

//On hover - border/underline moves to the left. Returns when stop hovering
.button--01:hover::after {
    left: -100%; //Moves to the left on hover. 
}


//----- BUTTON 02 -----

.button--02 {
    position: relative; //establish reference point for any absolute positioned children
    display: inline-block;
    cursor: pointer;
    border: none;
    background-color: transparent;
    overflow: hidden; //added to contain the animated element
    border-radius: 5px;
    padding: 0.5rem 0.5rem 0.5rem 0.5rem;
    z-index: 5; //base z index for the container

    @include for-size(tablet, up) {

        padding: 0.5rem 0.5rem 0.5rem 0.5rem;


    }

    // Active state for mobile (works with JS in button component)
    &.animate-active {
        .button--02__text {
            color: var(--off-white, #f6f0e7);
        }

        &::before {
            left: 0;
        }

        &::after {
            left: -100%;
        }
    }

}

//-----BORDER UNDERLINE ANIMATIONE-----
.button--02::before,
.button--02::after {
    position: absolute; //positioned relative to nearest positioned ancestor 
    content: "";
    bottom: 0;
    left: 0;
    width: 100%; //reduced to 80% from 100% so the line starts 10% further in from the right
    height: 2px;
    background-color: #22219b; //background 3px high = looks like a border-bottom but we have more control over it/can animate
    transition: all 0.25s ease-in;
    z-index: 3;

    pointer-events: none; // Only disable on pseudo-elements

}


.button--02 .button--02__text {
    position: relative; //establish a reference point for any absolutely positioned children inside it.
    display: inline-block;
    color: var(--mpblue, #22219b);
    transition: all 0.3s ease-in;
    z-index: 2; //keep the text above the animation

    @include sm__font;


    @include for-size (tablet, up) {
        // font-size: clamp(1rem, 3vw, 1.5rem);

    }
}

//BACKGROUND animation - not visible
.button--02::before {
    position: absolute; //positioned relative to their nearest positioned ancestor (which is the button element)
    content: "";
    top: 0;
    left: -100%; //positioned out of sight on the left (NOT hovering)
    width: 100%;
    height: 100%;


    background-color: var(--mpblue, #22219b);



    // border: 0.5px solid black;
    transition: all 0.3s ease-in;
    z-index: 1;
}


//ON HOVER STYLES 
@include for-size(tablet, up) {
    .button--02:hover .button--02__text {
        color: var(--off-white, #f6f0e7);

    }

    //on hover BACKGROUND becomes visible - slides in from the left. 
    .button--02:hover::before {
        left: 0; //background is visible. Travels in (-100%) from the left 

    }

    //On hover - border/underline moves to the left. Returns when stop hovering
    .button--02:hover::after {
        left: -100%; //Moves to the left on hover. 
    }
}